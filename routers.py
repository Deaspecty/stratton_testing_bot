import datetime
import logging
import coloredlogs
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
import methods
from methods import exist_datetime
import config
from config import con
import keyboards

router = Router()
# con = sqlite3.connect("database.db", timeout=30)
cursor = con.cursor(buffered=True)
coloredlogs.install()


@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{message.from_user.username}üôÇü§ùüèº "
        f"\n–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Stratton.kz"
        f"\n–ü–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=keyboards.main_actions(message=message, add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ì–ª–∞–≤–Ω–∞—è")
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{message.from_user.username}üôÇü§ùüèº "
        f"\n–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Stratton.kz"
        f"\n–ü–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=keyboards.main_actions(message=message, add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info(message: Message):
    await message.answer(
        f"üè¨  –ö–æ–º–ø–∞–Ω–∏—è Stratton.kz"
        f"\n"
        f"\nü§ñ  –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç-–±–æ—Ç—ã Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ù–∞—à–∏ –±–æ—Ç—ã —Å–¥–µ–ª–∞–Ω—ã –Ω–µ –Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö, –∞ –ø–∏—à—É—Ç—Å—è —Å –Ω—É–ª—è."
        f"\n"
        f"\nü§ñ  –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç-–±–æ—Ç—ã Instagram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —É–ª—É—á—à–∞–π—Ç–µ –ø—Ä–æ–¥–∞–∂–∏ –≤ Instagram. –ü—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ."
        f"\n"
        f"\nü§ñ  –†–æ–±–æ—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç —Ä—É—Ç–∏–Ω—ã –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø–æ–≤—ã—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π."
        f"\n"
        f"\nüìà  –ü–æ–≤—ã—Å—å—Ç–µ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å —Å–≤–æ–∏—Ö —É—Å–ª—É–≥ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —É–¥–æ–±–Ω–æ–≥–æ —Å–∞–π—Ç–∞.",
        reply_markup=keyboards.main_actions(message=message, add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def info(message: Message):
    await message.answer(
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ –ø–∏—à–∏—Ç–µ ‚úçÔ∏è"
        f"\n@strattonautomation",
        reply_markup=keyboards.main_actions(message=message, add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def info(message: Message):
    if methods.get_test_status(message) in [1, None]:
        today = datetime.datetime.now()
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É  üìÖ",
            reply_markup=keyboards.get_calendar(today.year, today.month, message)
        )
        # except Exception:
        #     print("Error 4444")
    elif methods.get_test_status(message) in [4, 5]:
        await message.answer(
            f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ"
            f"\n"
            f"\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–µ—Ä–µ—Å–¥–∞—á–∏ –ø–∏—à–∏—Ç–µ  ‚úçÔ∏è"
            f"\n@strattonautomation",
        )


@router.message(F.text == "–Æ—Ö—É")
async def info(message: Message):
    await message.answer(
        f"–Æ—Ö—É—É—É",
        reply_markup=keyboards.main_actions(message=message, add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def add_remove_exam(message: Message):
    try:
        if methods.get_test_status(message) == 1:
            cursor.execute(f"UPDATE users_data SET date=NULL, time=NULL, test_status=NULL "
                           f"WHERE user_id={message.from_user.id}")
            con.commit()
            return await message.answer(text="–í–∞—à–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ  ‚ùå",
                                        reply_markup=keyboards.main_actions(message=message,
                                                                            add_remove_exam=exist_datetime(
                                                                                message.from_user.id)))
    except Exception:
        return await message.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                    reply_markup=keyboards.main_actions(message=message, add_remove_exam=exist_datetime(
                                        message.from_user.id)))
    return await message.answer(text="–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ  ‚ùå",
                                reply_markup=keyboards.main_actions(message=message, add_remove_exam=exist_datetime(
                                    message.from_user.id)))


@router.message(Command("remake"))
async def start(message: Message):
    try:
        if config.DEV_MODE:
            cursor.execute(f"DELETE FROM users_data")
            con.commit()
            logging.info("DB remaked")
            await message.answer(text="–ê–ù–ò–ì–ò–õ–Ø–¶–ò–Ø –£–°–ü–ï–®–ù–ê",
                                 reply_markup=keyboards.main_actions(message=message, add_remove_exam=exist_datetime(
                                     message.from_user.id)))
    except Exception:
        logging.error("Remake error")


@router.message(F.video)
async def video(message: Message):
    cursor.execute(f"SELECT date, time FROM users_data WHERE user_id = {message.from_user.id}")
    row_db = cursor.fetchall()
    date_to = datetime.datetime.strptime(row_db[0][0].split(" ")[0] + " " + row_db[0][1] +
                                         ":00", '%Y-%m-%d %H:%M:%S')
    now = datetime.datetime.now()
    # print(now < date_to)
    # print(date_to)
    # print(date_to + datetime.timedelta(minutes=3))
    if message.video.duration > 30:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥.  üïó")

    if date_to < now < date_to + config.exam_times["duration"]:  # or config.DEV_MODE:
        await message.send_copy(message.from_user.id,
                                reply_markup=keyboards.keyboard_is_exam_complete(from_who=0,
                                                                                 sender=message.from_user.id))
    else:
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤ —Å—Ä–æ–∫!  ‚åõÔ∏è")

import datetime
import sqlite3

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from methods import exist_datetime
import config
import keyboards

router = Router()
con = sqlite3.connect("database.db")
cursor = con.cursor()


@router.message(Command("start"))
async def start(message: Message):
    try:
        cursor.execute(f"SELECT user_id FROM users_data WHERE user_id = {message.from_user.id}")
        row = cursor.fetchall()
        if row == []:
            print("–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            cursor.execute(f"INSERT INTO users_data (user_id) VALUES ({message.from_user.id});")
            con.commit()
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + message.from_user.username + " —Å id-" + message.from_user.id + " –¥–æ–±–∞–≤–ª–µ–Ω")
    except Exception:
        print("sql eror")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{message.from_user.username}üôÇü§ùüèº "
        f"\n–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Stratton.kz"
        f"\n–ü–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=keyboards.main_actions(remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info(message: Message):
    await message.answer(
        f"–¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–π —É –º–µ–Ω—è –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å. –ö–∞–∫ —Ç–æ —Ç–∞–∫ :)",
        reply_markup=keyboards.main_actions(remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def info(message: Message):
    await message.answer(
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ –ø–∏—à–∏—Ç–µ ‚úçÔ∏è"
        f"@strattonautomation",
        reply_markup=keyboards.main_actions(remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def info(message: Message):
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É  üìÖ",
        reply_markup=keyboards.get_calendar(2024, 2, message)
    )


@router.message(F.text == "–Æ—Ö—É")
async def info(message: Message):
    await message.answer(
        f"–Æ—Ö—É—É—É",
        reply_markup=keyboards.main_actions(remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def remove_exam(message: Message):
    try:
        cursor.execute(f"UPDATE users_data SET date=NULL, time=NULL, test_status=NULL "
                       f"WHERE user_id={message.from_user.id}")
        con.commit()
        await message.answer(text="–í–∞—à–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
                             reply_markup=keyboards.main_actions(remove_exam=exist_datetime(message.from_user.id)))
    except Exception:
        await message.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                             reply_markup=keyboards.main_actions(remove_exam=exist_datetime(message.from_user.id)))


@router.message(Command("remake"))
async def start(message: Message):
    try:
        if config.DEV_MODE:
            cursor.execute(f"DELETE FROM users_data")
            con.commit()
            print("remaked!")
            await message.answer(text="–ê–ù–ò–ì–ò–õ–Ø–¶–ò–Ø –£–°–ü–ï–®–ù–ê",
                                 reply_markup=keyboards.main_actions(remove_exam=exist_datetime(message.from_user.id)))
    except Exception:
        print("sql eror")


@router.message(F.video)
async def video(message: Message):
    cursor.execute(f"SELECT date, time FROM users_data WHERE user_id = {message.from_user.id}")
    row_db = cursor.fetchall()
    date_to = datetime.datetime.strptime(row_db[0][0].split(" ")[0] + " " + row_db[0][1] +
                                         ":00", '%Y-%m-%d %H:%M:%S')
    now = datetime.datetime.now()
    print(now < date_to)
    print(date_to)
    print(date_to + datetime.timedelta(minutes=3))
    if message.video.duration > 30:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥.")

    if date_to < now < date_to + config.exam_times["duration"]:  # or config.DEV_MODE:
        await message.send_copy(config.checker_id, reply_markup=keyboards.keyboard_is_exam_complete(from_who=0, sender=message.from_user.id))
    else:
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤ —Å—Ä–æ–∫!")

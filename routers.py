import datetime
import logging
import coloredlogs
from dateutil import tz 
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
import methods
from methods import exist_datetime
import config
from config import con
import keyboards

router = Router()
# con = sqlite3.connect("database.db", timeout=30)
# cursor = con.cursor(buffered=True)
coloredlogs.install()


@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{message.from_user.username}üôÇü§ùüèº "
        f"\n–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Stratton.kz"
        f"\n–ü–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                            username=message.from_user.username,
                                            add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ì–ª–∞–≤–Ω–∞—è")
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{message.from_user.username}üôÇü§ùüèº "
        f"\n–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Stratton.kz"
        f"\n–ü–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                            username=message.from_user.username,
                                            add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info(message: Message):
    await message.answer(
        f"üè¨  –ö–æ–º–ø–∞–Ω–∏—è Stratton.kz"
        f"\n"
        f"\nü§ñ  –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç-–±–æ—Ç—ã Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ù–∞—à–∏ –±–æ—Ç—ã —Å–¥–µ–ª–∞–Ω—ã –Ω–µ –Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö, –∞ –ø–∏—à—É—Ç—Å—è —Å –Ω—É–ª—è."
        f"\n"
        f"\nü§ñ  –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç-–±–æ—Ç—ã Instagram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —É–ª—É—á—à–∞–π—Ç–µ "
        f"–ø—Ä–æ–¥–∞–∂–∏ –≤ Instagram. –ü—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ."
        f"\n"
        f"\nü§ñ  –†–æ–±–æ—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç —Ä—É—Ç–∏–Ω—ã –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø–æ–≤—ã—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –∏ "
        f"—Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π."
        f"\n"
        f"\nüìà  –ü–æ–≤—ã—Å—å—Ç–µ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å —Å–≤–æ–∏—Ö —É—Å–ª—É–≥ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —É–¥–æ–±–Ω–æ–≥–æ —Å–∞–π—Ç–∞.",
        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                            username=message.from_user.username,
                                            add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def info(message: Message):
    await message.answer(
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ –ø–∏—à–∏—Ç–µ ‚úçÔ∏è"
        f"\n@strattonautomation",
        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                            username=message.from_user.username,
                                            add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def info(message: Message):
    if methods.get_test_status(message.from_user.id, message.from_user.username) in [1, None]:
        today = datetime.datetime.now(tz=tz.gettz("Asia / Almaty"))
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É: üìÖ",
            reply_markup=keyboards.get_calendar(today.year, today.month, message)
        )
    elif methods.get_test_status(message.from_user.id, message.from_user.username) in [2, 3, 4]:
        await message.answer("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞—á–∞–≤—à–µ–µ—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. ‚ùå")
    elif methods.get_test_status(message.from_user.id, message.from_user.username) in [5, 6]:
        await message.answer(
            f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ."
            f"\n"
            f"\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–µ—Ä–µ—Å–¥–∞—á–∏ –ø–∏—à–∏—Ç–µ ‚úçÔ∏è"
            f"\n@strattonautomation"
        )


@router.message(F.text == "–Æ—Ö—É")
async def info(message: Message):
    await message.answer(
        f"–Æ—Ö—É—É—É",
        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                            username=message.from_user.username,
                                            add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def add_remove_exam(message: Message):
    try:
        if methods.get_test_status(message.from_user.id, message.from_user.username) == 1:
            cursor = con.cursor(buffered=True)
            cursor.execute(f"UPDATE users_data SET date=NULL, time=NULL, test_status=NULL "
                           f"WHERE user_id={message.from_user.id}")
            con.commit()
            cursor.close()
            return await message.answer(text="–í–∞—à–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. ‚ùå",
                                        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                            username=message.from_user.username,
                                                                            add_remove_exam=exist_datetime(
                                                                                message.from_user.id)))
        elif methods.get_test_status(message.from_user.id, message.from_user.username) in [2, 3, 4]:
            return await message.answer(text="–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–≤—à–µ–µ—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. ‚ùå",
                                        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                            username=message.from_user.username,
                                                                            add_remove_exam=exist_datetime(
                                                                                message.from_user.id)))
        elif methods.get_test_status(message.from_user.id, message.from_user.username) in [5, 6]:
            return await message.answer(text="–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. ‚ùå",
                                        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                            username=message.from_user.username,
                                                                            add_remove_exam=exist_datetime(
                                                                                message.from_user.id)))
    except Exception:
        return await message.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                                    reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                        username=message.from_user.username,
                                                                        add_remove_exam=exist_datetime(
                                                                            message.from_user.id)))


@router.message(Command("remake"))
async def start(message: Message):
    try:
        if config.DEV_MODE:
            cursor = con.cursor(buffered=True)
            cursor.execute(f"DELETE FROM users_data")
            con.commit()
            cursor.close()
            logging.info("DB remaked")
            await message.answer(text="–ê–ù–ò–ì–ò–õ–Ø–¶–ò–Ø –£–°–ü–ï–®–ù–ê",
                                 reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                     username=message.from_user.username,
                                                                     add_remove_exam=exist_datetime(
                                                                         message.from_user.id)))
    except Exception:
        logging.error("Remake error")


@router.message(F.video)
async def video(message: Message):
    if methods.get_test_status(message.from_user.id, message.from_user.username) in [2, 3]:
        cursor = con.cursor(buffered=True)
        cursor.execute(f"SELECT date, time FROM users_data WHERE user_id = {message.from_user.id}")
        row_db = cursor.fetchall()
        cursor.close()
        date_to = datetime.datetime.strptime(row_db[0][0].split(" ")[0] + " " + row_db[0][1], '%Y-%m-%d %H:%M')
        now = datetime.datetime.now(tz=tz.gettz("Asia / Almaty"))
        video_format = message.video.mime_type.lower()
        print(video_format)
        if message.video.duration > 40:
            return await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 40 —Å–µ–∫—É–Ω–¥. üïó")
        print("–í–∏–¥–µ–æ –≤–µ—Å–∏—Ç = ", message.video.file_size)
        if message.video.file_size > 10485760:  # 10 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
            return await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –≤–µ—Å–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10–ú–ë. üíæ")
        if not (video_format in ["video/mp4", "video/quicktime"]):
            return await message.reply(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mov –∏–ª–∏ .mp4 ")
        if date_to < now < date_to + config.exam_times["duration"]:  # or config.DEV_MODE:
            await message.send_copy(message.from_user.id,
                                    reply_markup=keyboards.keyboard_is_exam_complete(from_who=0,
                                                                                     sender=message.from_user.id))
            con.commit()
    elif methods.get_test_status(message.from_user.id, message.from_user.username) in [5, 6]:
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤ —Å—Ä–æ–∫! ‚åõÔ∏è")
    elif methods.get_test_status(message.from_user.id, message.from_user.username) == 4:
        await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! ‚ùå")


@router.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def decline_test(message: Message):
    if methods.get_test_status(message.from_user.id, message.from_user.username) in [2, 3]:
        await methods.send_testing_message_m(message, run_date=datetime.datetime.
                                             strptime(datetime.datetime.now(tz=tz.gettz("Asia / Almaty")).strftime("%Y-%m-%d %H:%M"),
                                                      "%Y-%m-%d %H:%M"), test_status=5)
    if methods.get_test_status(message.from_user.id, message.from_user.username) in [4]:
        await message.answer(text="–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")


# @router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—ã")
# async def decline_test(message: Message):
#     if message.from_user.id == config.checker_id:
#         await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚úèÔ∏è", reply_markup=keyboards.edit_texts())
#         methods.sql_db_update(columns={"test_status": 7},
#                               filter={"user_id": message.from_user.id})


@router.message(F.text)
async def format_time(message: Message):
    cursor = con.cursor(buffered=True)
    cursor.execute(f"select test_status from users_data where user_id={message.from_user.id}")
    if methods.get_test_status(message.from_user.id, message.from_user.username) == 1:
        for time_format in ["%H:%M", "%H %M", "%H-%M", "%H.%M"]:
            try:
                time = datetime.datetime.strptime(message.text, time_format)
                await methods.appoint_test(message, time)
            except ValueError:
                pass
    elif methods.get_test_status(message.from_user.id, message.from_user.username) in [2, 3]:
        if (message.text.startswith("@") and message.text.endswith("bot") and not (" " in message.text)) or \
                (message.text.startswith("https://t.me/") and message.text.endswith("bot") and
                 not (" " in message.text)):
            cursor.execute(f"SELECT date, time FROM users_data WHERE user_id = {message.from_user.id}")
            row_db = cursor.fetchall()
            date_to = datetime.datetime.strptime(row_db[0][0].split(" ")[0] + " " + row_db[0][1], '%Y-%m-%d %H:%M')
            now = datetime.datetime.now(tz=tz.gettz("Asia / Almaty"))
            if date_to < now < date_to + config.exam_times["duration"]:  # or config.DEV_MODE:
                await message.send_copy(message.from_user.id,
                                        reply_markup=keyboards.keyboard_is_exam_complete(from_who=0,
                                                                                         sender=message.from_user.id))
        else:
            await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞.")
    elif methods.get_test_status(message.from_user.id, message.from_user.username) == 4:
        await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! ‚ùå")
    cursor.close()


